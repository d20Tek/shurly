@page "/authentication/change-password"
@inject IAuthenticationService _authService;
@inject NavigationManager _nav;
@using D20Tek.Authentication.Individual.Client.Contracts;

<h3>Change Password</h3>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@input" OnValidSubmit="PerformChangePassword">
            <DataAnnotationsValidator />
            <div class="form-floating my-2">
                <InputText class="form-control" type="password" @bind-Value=input.CurrentPassword
                           autocomplete="current-password" aria-required="true"
                           placeholder="password" />
                <label class="form-label" for="current-password">Current Password</label>
                <ValidationMessage For=@(() => input.CurrentPassword) />
            </div>
            <div class="form-floating my-2">
                <InputText class="form-control" type="password" @bind-Value=input.NewPassword
                           autocomplete="new-password" aria-required="true"
                           placeholder="password" />
                <label class="form-label" for="new-password">New Password</label>
                <ValidationMessage For=@(() => input.NewPassword) />
            </div>
            <div class="form-floating my-2">
                <InputText class="form-control" type="password" @bind-Value=input.ConfirmPassword
                           autocomplete="confirm-password" aria-required="true"
                           placeholder="password" />
                <label class="form-label" for="confirm-password">Confirm Password</label>
                <ValidationMessage For=@(() => input.ConfirmPassword) />
            </div>

            <button id="register-submit" type="submit" class="w-100 btn btn-lg btn-primary">
                Update password
            </button>
        </EditForm>
        <div class="my-2">@message</div>
    </div>
</div>

@code {
    ChangePasswordRequest input = new();
    string message = string.Empty;

    private async Task PerformChangePassword()
    {
        message = string.Empty;

        var response = await _authService.ChangePasswordAsync(input);
        response.MatchFirstError(
            auth =>
            {
                message = "Password changed successfully!";
                _nav.NavigateTo("/authentication/profile");
            },
            error => message = $"[{error.Code}]: {error.Message}");
    }
}
